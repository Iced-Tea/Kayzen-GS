//-----------------------------------------------------------------
// Config
//-----------------------------------------------------------------

$kayzenGS: (
    options: (
        columns         : 12,
        gutter          : 3%,
        col-collapse    : 940px,
        row-namespace   : "row",
        col-namespace   : "span",
    ),
    settings: (
        kayzen-gs       : true,
        old-ie          : false,
        responsive      : true,
        mobile-first    : false,
        column-stacking : true,
        width-override  : true,
        flow-columns    : true,
        magic-columns   : true,
        block-columns   : true,
        no-gutter       : true,
        reverse-columns : true,
        push-columns    : true,
        pull-columns    : true
    ),
    breakpoints: (
        break-0         : 0px,
        break-1         : 460px,
        break-2         : 720px,
        break-3         : 940px,
        break-4         : 1200px,
        break-5         : 1400px
    ),
    fractions: (
        full            : (1, 1),
        half            : (1, 2),
        third           : (1, 3),
        quarter         : (1, 4),
        sixth           : (1, 6)
    )
) !default;

//-----------------------------------------------------------------
// Quick Config
//-----------------------------------------------------------------

@function kayzenGS($option) {
    @return map-get-deep($kayzenGS, $option);
}

@function kgs-option($option) {
    @return map-get-deep($kayzenGS, 'options', $option);
}

@function kgs-setting($setting) {
    @return map-get-deep($kayzenGS, 'settings', $setting);
}

@function kgs-breakpoint($breakpoint) {
    @return map-get-deep($kayzenGS, 'breakpoints', $breakpoint);
}

@function kgs-fraction($fraction) {
    @return map-get-deep($kayzenGS, 'fractions', $fraction);
}

@function kgs-config($options...) {
    @return map-get-deep($config, $options...);
}

//-----------------------------------------------------------------
// Preperation
//-----------------------------------------------------------------

// Set min/max width for breakpoints
$kgs-scale: if(kgs-setting('mobile-first'), min, max);

// Reset "mobile-first" to false if "responsive" is disabled
@if not kgs-setting('responsive') {
    $kayzenGS: map-merge-deep(('settings': (
        'mobile-first' : false
    )), $kayzenGS);
}
//-----------------------------------------------------------------
// Map Get Deep
// https://css-tricks.com/snippets/sass/deep-getset-maps/
//-----------------------------------------------------------------

@function map-get-deep($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}
//-----------------------------------------------------------------
// Map Merge Deep
// http://git.io/vmBVH
//-----------------------------------------------------------------

@function map-merge-deep($map-old, $map-new, $overwrite: true) {

	// Iterate through each value of the new map
	@each $key, $new-value in $map-new {
		// Check if that value already exists on the old map
		@if map-has-key($map-old, $key) {
			// There is an existing key
			$old-value: map-get($map-old, $key);
			@if type-of($new-value) == map and type-of($old-value) == map {
				// If both are maps, recurse regardless of $overwrite
				$merged-value: map-merge-deep($old-value, $new-value);
				$map-old: map-set($map-old, $key, $merged-value);	
			} @else {
				// Otherwise check $overwrite
				@if $overwrite {
					$map-old: map-set($map-old, $key, $new-value);
				}
			}
		} @else {
			// There is no existing key to add
			$map-old: map-set($map-old, $key, $new-value);
		}
	}
	@return $map-old;
	
}
//-----------------------------------------------------------------
// Map-Set
// http://git.io/vmBKD
//-----------------------------------------------------------------

@function get-keys($keys, $counter) {
    $return: ();
    @for $i from 1 to $counter {
        $return: append($return, nth($keys, $i));
    }
    @return $return;
}

@function map-set($map, $key, $value) {
    @return map-merge($map, ($key: $value));
}

@function map-set-deep($map, $keys, $value) {
    $private-sassy-maps-suppress-warnings: true !global;
    $length: length($keys);
    $get-keys: ();
    $map-level: ();
    @if $length > 1 {
        $get-keys: get-keys($keys, $length);
        $map-level: map-get-deep($map, $get-keys);
    }
    $merge: (nth($keys, $length): $value);
    @if $map-level {
        $merge: map-merge($map-level, $merge);
    }
    @for $i from ($length * -1 + 1) through -1 {
        $j: abs($i);
        $key: nth($keys, $j);
        // @debug $get-keys;
        @if $j > 1 {
            $get-keys: get-keys($keys, $j);
            $map-level: map-get-deep($map, $get-keys);
            @if $map-level {
                $merge: map-merge($map-level, ($key: $merge));
            }
            @else {
                $merge: ($key: $merge);
            }
        }
        @else {
            $merge: ($key: $merge);
        }
    }
    $map: map-merge($map, $merge);
    $private-sassy-maps-suppress-warnings: false !global;
    @return $map;
}
//-----------------------------------------------------------------
// Reverse Map Function
// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
//-----------------------------------------------------------------

@function reverse-list($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));      
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}
//-----------------------------------------------------------------
// Reverse Map Function
// http://git.io/vLfuz
//-----------------------------------------------------------------

@function reverse-map ($map) {	
    $keys: map-keys($map);
    $map-reversed: ();    
    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }
    $result: $map-reversed; 
    @return $result;
}
//-----------------------------------------------------------------
// Adaptive Columns
//-----------------------------------------------------------------

@mixin kgs-adaptive-columns {
    
    // Reverse $breakpoints map
    // This is to allow the generated CSS to override when scaling
    $reverse-breakpoints: if(
        kgs-setting(mobile-first),
        kayzenGS(breakpoints),
        reverse-map(kayzenGS(breakpoints))
    );

    > [class*="#{kgs-option('col-namespace')}"] {
    
        &[class*="break"] {
            @include kgs-column-core;
            @include kgs-gutter($flush: false);
        }
        
        @each $bp, $width in $reverse-breakpoints {
            @media (#{$kgs-scale}-width: $width) {
                @each $name, $fraction in kayzenGS(fractions) {		
                    &.#{$bp}-#{$name} {
                        width: kgs-flow-width(nth($fraction, 1), nth($fraction, 2));
                    }
                }
            }
        }
    
    }

}
//-----------------------------------------------------------------
// Gutter
//-----------------------------------------------------------------

@mixin kgs-gutter($flush: true) {
	margin-left: kgs-option(gutter);
    @if $flush {
        &:first-child {
            margin-left: 0;
        };
    }
}
//-----------------------------------------------------------------
// Pull Column
//-----------------------------------------------------------------

@mixin kgs-pull($col-type: default) {
    
    [class*="pull-"] {
        position: relative;
    }
        
    @for $i from 1 through kgs-option(columns) {       
        .pull-#{$i} {
            @if $col-type == 'default' {
                left: calc(-#{kgs-default-width($i, kgs-option(columns))} - #{kgs-option(gutter)});
            } @else if $col-type == 'flow' {
                left: calc(-#{kgs-flow-width($i, kgs-option(columns))} - #{kgs-option(gutter)});
            } @else if $col-type == 'no-gutter' {
                left: calc(-#{kgs-no-gutter-width($i, kgs-option(columns))});
            }
        }      
    }     
    
}
//-----------------------------------------------------------------
// Push Column
//-----------------------------------------------------------------

@mixin kgs-push($col-type: default) {
    
    [class*="push-"] {
        position: relative;
    }
        
    @for $i from 1 through kgs-option(columns) {       
        .push-#{$i} {
            @if $col-type == 'default' {
                left: calc(#{kgs-default-width($i, kgs-option(columns))} + #{kgs-option(gutter)});
            } @else if $col-type == 'flow' {
                left: calc(#{kgs-flow-width($i, kgs-option(columns))} + #{kgs-option(gutter)});
            } @else if $col-type == 'no-gutter' {
                left: calc(#{kgs-no-gutter-width($i, kgs-option(columns))});
            }
        }      
    }     
    
}
//-----------------------------------------------------------------
// Reverse Columns
//-----------------------------------------------------------------

@mixin kgs-reverse-order {
    
    transform: rotate(180deg);
    text-align: right;
    > [class*="#{kgs-option('col-namespace')}"] {
        transform: scale(-1);
    }
    
}
//-----------------------------------------------------------------
// Stack Columns
//-----------------------------------------------------------------

@mixin kgs-stack-columns($type: null, $core: false) {
    
    $selector: if(
        $core, '&', '> [class*="#{kgs-option(col-namespace)}"]'
    );
    
    #{$selector} {
        display: block;
        left: auto; // resets push/pull
        @if $type == 'flow' {
            width: calc(100% - kgs-option(gutter));
        } @else if $type == 'magic' {
            width: 100% !important;
            margin-left: 0;
        } @else if $type == null {
            width: 100%;
            margin-left: 0;
        }
    }
    
}

//-----------------------------------------------------------------
// Generate Block Columns
//-----------------------------------------------------------------

@mixin kgs-block-columns {
    
    > [class*="#{kgs-option('col-namespace')}"] {
        display: table-cell;
    }
    
}

//-----------------------------------------------------------------
// Calculate Default Column Width
//-----------------------------------------------------------------

@function kgs-default-width($span, $columns) {
	@return ((100/$columns) * $span) - ( ( ((100 / ((100/$columns) * $span)) - 1) * kgs-option(gutter) ) / ( $columns / $span ) );
}
//-----------------------------------------------------------------
// Generate Default Columns
//-----------------------------------------------------------------

@mixin kgs-default-columns {
        
    > [class*="#{kgs-option('col-namespace')}"] {
        @include kgs-column-core;
        @include kgs-gutter;  
    }
        
    @for $i from 1 through kgs-option(columns) {       
        > .#{kgs-option('col-namespace')}-#{$i} {
            width: kgs-default-width($i, kgs-option(columns))
        }      
    }  
    
}

//-----------------------------------------------------------------
// Calculate Flow Column Width
//-----------------------------------------------------------------

@function kgs-flow-width($span, $columns) {
	@return ((100/$columns) * $span) - kgs-option(gutter);
}
//-----------------------------------------------------------------
// Generate Flow Columns
//-----------------------------------------------------------------

@mixin kgs-flow-columns {
                        
    > [class*="#{kgs-option('col-namespace')}"] {
        @include kgs-column-core;
        @include kgs-gutter($flush: false);  
    }
    
    @for $i from 1 through kgs-option(columns) {
        > .#{kgs-option(col-namespace)}-#{$i} {
            width: kgs-flow-width($i, kgs-option(columns));
        }
    }
   
}

//-----------------------------------------------------------------
// Calculate Magic Column Width
//-----------------------------------------------------------------

@function kgs-magic-width($columns: $columns) {
	@return (100/$columns) - ( ( ( (100 / (100/$columns) ) - 1) * kgs-option(gutter) ) / $columns );
}
//-----------------------------------------------------------------
// Magic Column Core
//-----------------------------------------------------------------

@mixin kgs-magic-column-core($namespace: '[class*="#{kgs-option('col-namespace')}"]') {
    &:first-child {
        margin-left: 0;
        @for $i from 1 through kgs-option(columns) {
            &:nth-last-child(#{$i}) {
                &, ~ #{$namespace} {
                    width: kgs-magic-width($i);
                }
            }
        }
    }
}
//-----------------------------------------------------------------
// Generate Magic Columns
//-----------------------------------------------------------------

@mixin kgs-magic-columns {
    
	> [class*="#{kgs-option('col-namespace')}"] {
        
        @include kgs-column-core;
        @include kgs-gutter;  
        @include kgs-magic-column-core;
        
    }
    
}

//-----------------------------------------------------------------
// Calculate No-Gutter Column Width
//-----------------------------------------------------------------

@function kgs-no-gutter-width($span, $columns) {
	@return percentage($span/$columns);
}
//-----------------------------------------------------------------
// Generate No-Gutter Columns
//-----------------------------------------------------------------

@mixin kgs-no-gutter-columns {
    
    > [class*="#{kgs-option('col-namespace')}"] {
        @include kgs-column-core;
    }
            
    @for $i from 1 through kgs-option(columns) {
        > .#{kgs-option(col-namespace)}-#{$i} {	
            width: kgs-no-gutter-width($i, kgs-option(columns));
        }
    }
    
}
/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
https://github.com/esr360/Kayzen-GS
	
-----------------------------------------------------------------*/

// Reset Spacing
* {        
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;
}

@if kgs-setting('kayzen-gs') {
    
//-----------------------------------------------------------------
// Row
//-----------------------------------------------------------------

.#{kgs-option('row-namespace')},
[class*="#{kgs-option('row-namespace')}--"] {
    @include kgs-row-core;
}

//-----------------------------------------------------------------
// Column Types
//-----------------------------------------------------------------

.#{kgs-option('row-namespace')} {
    
    // Default Columns
    //-------------------------------------------------------------
    
    @if (kgs-option(mobile-first), '&:not([class*="break"])', '&') {
        @if kgs-setting(mobile-first) {
            @media (min-width: kgs-option(col-collapse)) {
                @include kgs-default-columns;
            }
        } @else {
            @include kgs-default-columns; 
            &:not([class*="break"]) {
                @media (max-width: kgs-option(col-collapse)) {
                    @include kgs-stack-columns;
                }
            }
        }
    }

    @each $bp, $width in kayzenGS(breakpoints) {
        &.#{kgs-option('row-namespace')}--#{$bp} {
            @if kgs-setting(mobile-first) {
                @media (#{$kgs-scale}-width: $width) {
                    @include kgs-default-columns;
                }
            } @else {
                @media (#{$kgs-scale}-width: $width) {
                    @include kgs-stack-columns;
                }
            }
        }
    }
        
    
    // Flow Columns
    //-------------------------------------------------------------
    
    &--flow {
        
        margin-left: -#{kgs-option(gutter)};
        width: calc(100% + kgs-option(gutter));
        
        @include kgs-pull(flow);
        @include kgs-push(flow);
        
        @if (kgs-option(mobile-first), '&:not([class*="break"])', '&') {
            @if kgs-setting(mobile-first) {
                @media (min-width: kgs-option(col-collapse)) {
                    @include kgs-flow-columns;
                }
            } @else {
                @include kgs-flow-columns;
                > [class*="#{kgs-option(col-namespace)}"] {
                    margin-left: #{kgs-option(gutter)};
                } 
                &:not([class*="break"]) {
                    @media (max-width: kgs-option(col-collapse)) {
                        @include kgs-stack-columns($type: flow);
                    }
                }
            }
        }
    
        @each $bp, $width in kayzenGS(breakpoints) {
            &.#{kgs-option('row-namespace')}--#{$bp} {
                @if kgs-setting(mobile-first) {
                    @media (#{$kgs-scale}-width: $width) {
                        @include kgs-flow-columns;
                    }
                } @else {
                    @media (#{$kgs-scale}-width: $width) {
                        @include kgs-stack-columns($type: flow);
                    }
                }
            }
        }
        
        // Adaptive Columns     
        @include kgs-adaptive-columns;
        
    }
    
    // Magic Columns
    //-------------------------------------------------------------
    
    &--magic {
        
        @if (kgs-option(mobile-first), '&:not([class*="break"])', '&') {
            
            @if kgs-setting(mobile-first) {
                @media (min-width: kgs-option(col-collapse)) {
                    @include kgs-magic-columns;
                }
            } @else {
                @include kgs-magic-columns;
                &:not([class*="break"]) {
                    @media (max-width: kgs-option(col-collapse)) {
                        @include kgs-stack-columns($type: magic);
                    }
                }
            }
            
            @each $bp, $width in kayzenGS(breakpoints) {
                &.#{kgs-option('row-namespace')}--#{$bp} {
                    @if kgs-setting(mobile-first) {
                        @media (#{$kgs-scale}-width: $width) {
                            @include kgs-magic-columns;
                        }
                    } @else {
                        @media (#{$kgs-scale}-width: $width) {
                            @include kgs-stack-columns($type: magic);
                        }
                    }
                }
            }
            
        }
        
    } // &--magic
    
    // No Gutter Columns
    //-------------------------------------------------------------
    
    &--no-gutter {
        
        @include kgs-pull(no-gutter);
        @include kgs-push(no-gutter);
        @include kgs-no-gutter-columns;
        
    }
    
    // Block Columns
    //-------------------------------------------------------------
    
    &--block {
        
        @if (kgs-option(mobile-first), '&:not([class*="break"])', '&') {
            @if kgs-setting(mobile-first) {
                @media (min-width: kgs-option(col-collapse)) {
                    @include kgs-block-columns;
                }
            } @else {
                @include kgs-block-columns;
                &:not([class*="break"]) {
                    @media (max-width: kgs-option(col-collapse)) {
                        @include kgs-stack-columns;
                    }
                }
            }
        }
        
        @each $bp, $width in kayzenGS(breakpoints) {
            &.#{kgs-option('row-namespace')}--#{$bp} {
                @if kgs-setting(mobile-first) {
                    @media (#{$kgs-scale}-width: $width) {
                        @include kgs-block-columns;
                    }
                } @else {
                    @media (#{$kgs-scale}-width: $width) {
                        @include kgs-stack-columns;
                    }
                }
            }
        }
        
    } // &--block
    
    // Reverse Column Order
    //-------------------------------------------------------------

    &--reverse {
        
        &:not([class*="reverse-break"]) {
            @include kgs-reverse-order;
        }
                    
        @each $bp, $width in kayzenGS(breakpoints) {
            @media (#{$kgs-scale}-width: $width) {
                &.reverse-#{$bp} {
                    @include kgs-reverse-order;
                }
            }
        }
        
    }
    
}
    
//-----------------------------------------------------------------
// Custom Push/Pull
//-----------------------------------------------------------------

@include kgs-pull;
@include kgs-push;

}

//-----------------------------------------------------------------
// Column Core
//-----------------------------------------------------------------

@mixin kgs-column-core($custom: ()) {
    
    display: inline-block;
    vertical-align: top;
    // IE < 8: fake inline-block
    @if kgs-setting('old-ie') {
        *display: inline;
        zoom: 1; 
    }
    
} // column-core()

//-----------------------------------------------------------------
// Row Core
//-----------------------------------------------------------------

@mixin kgs-row-core {
    
    // Firefox/IE collapse white-space
    letter-spacing: -1em;
    // Webkit collapse white-space
    display: table;
    width: 100%;
    // Opera collapse white-space
    @at-root {
        .opera-only :-o-prefocus, & {
            word-spacing: -0.43em;
        }
    }
    // IE < 8 collapse white-space
    @if kgs-setting(old-ie) {
        *letter-spacing: normal;
        *word-spacing: -0.43em;
    }	
    // Required for some third-party sliders
    table-layout: fixed;
    
} // row()
//-----------------------------------------------------------------
// Custom Column
//-----------------------------------------------------------------

@mixin column($custom: ()) {

	//-------------------------------------------------------------
	// Config
	//-------------------------------------------------------------
	
	$config: map-merge((
		'width'        : 'full', 
		'type'         : null, 
		'namespace'    : &, 
		'stack'        : kgs-option(col-collapse), 
		'mobile-first' : kgs-setting(mobile-first),
		'respond-to'   : null
	), $custom);
	
	$config: $config !global;
	
	$span: null;
	$columns: null; 
    
	//-------------------------------------------------------------
	// Prepare Grid
	//-------------------------------------------------------------
    
    // if 'width' is a fraction e.g. 'quarter'
	@if type-of(kgs-config('width')) == string {
		$span: nth(kgs-fraction(kgs-config(width)), 1);
		$columns: nth(kgs-fraction(kgs-config('width')), 2);
	} 
    
    // if 'width' is a percentage e.g. 25%
    @else if type-of(kgs-config('width')) == number {
		$span: kgs-config(width);
		$columns: 100;	
	} 
    
    // if 'width' is a (span, columns) format e.g. (3, 12)
    @else if type-of(kgs-config('width')) == list {
		$span: nth(kgs-config('width'), 1);
		$columns: nth(kgs-config('width'), 2);	
	}
    
	//-------------------------------------------------------------
	// Apply Styles
	//-------------------------------------------------------------
    
    @if kgs-config('mobile-first') {
        @media (min-width: kgs-config('stack')) {
            @include kgs-column-core;
        }
    } @else {
        @include kgs-column-core;
    }
    
    // if flow column
    @if kgs-config('type') == flow {
        @include kgs-gutter(false);
        width: kgs-flow-width($span, $columns);
	} 
	
    // if magic column
	@else if kgs-config('type') == magic {
        @if kgs-config('mobile-first') {
            @media (min-width: kgs-config('stack')) {
                @include kgs-column-core;
                @include kgs-gutter;
                @include kgs-magic-column-core('#{kgs-config('namespace')}');
            }
        } @else {
            @include kgs-column-core;
            @include kgs-gutter;
            @include kgs-magic-column-core('#{kgs-config('namespace')}');
            @media (max-width: kgs-config('stack')) {
                @include kgs-stack-columns($type: 'magic', $core: true);
            }
        }
	}
    
    // all other column types
    @else {	
        @if kgs-config('mobile-first') {
            width: 100%;
            @media (min-width: kgs-config('stack')) {
                @include kgs-gutter;
                width: kgs-default-width($span, $columns);
                @if kgs-config('type') == 'block' {
                    display: table-cell;		
                } 
            }
        } @else {		
            @include kgs-gutter;
            width: kgs-default-width($span, $columns);
            @if kgs-config('type') == 'block' {
                display: table-cell;		
            } 
            @media (max-width: kgs-config('stack')) {
                @include kgs-stack-columns($core: true);
            }
        }
	}
    
	//-------------------------------------------------------------
	// Adaptive Widths
	//-------------------------------------------------------------
	
    @if kgs-config('respond-to') {
            
        $breakpoints: if(
            kgs-config('mobile-first'),
            kgs-config('respond-to'),
            reverse-list(kgs-config('respond-to'))
        );
        
        @each $width, $breakpoint in $breakpoints {
            
            $columns: null;	
            $span: null; 
            
            $respond-scale: if(
                kgs-config('mobile-first'), min, max
            );
    
            @media (#{$respond-scale}-width: kgs-breakpoint($breakpoint)) {
                
                // if 'width' is a fraction e.g. 'quarter'
                @if type-of($width) == string {
                    $span: nth(kgs-fraction($width), 1);
                    $columns: nth(kgs-fraction($width), 2);
                } 
                
                // if 'width' is a percentage e.g. 25%
                @else if type-of($width) == number {
                    $span: $width;
                    $columns: 100;
                } 
                
                // if 'width' is a (span, columns) format e.g. (3, 12)
                @else if type-of($width) == list {
                    $span: nth($width, 1);
                    $columns: nth($width, 2);			
                }
                
                @include kgs-column-core;
                
                // if flow column
                @if kgs-config('type') == 'flow' {
                    width: kgs-flow-width($span, $columns);	
                } 
                
                // all other column types
                @else {	
                    width: kgs-default-width($span, $columns);	
                }
                        
            }
                
        }
        
    }
	
} // @mixin column
//-----------------------------------------------------------------
// Custom Row
//-----------------------------------------------------------------

@mixin row($type: null) {
	@include kgs-row-core;
	@if $type == flow {		
		margin-left: -#{kgs-option(gutter)};
		width: calc(100% + kgs-option(gutter));
	} @else if $type == block {		
		&:after {
			display: none;
		}
	}
}