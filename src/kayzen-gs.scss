//=================================================================
// Grid
//=================================================================

/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
http://github.com/esr360/Kayzen-GS/
	
-----------------------------------------------------------------*/

@mixin grid($custom: ()) {
        
    //-------------------------------------------------------------
    // Row
    //-------------------------------------------------------------
    
    %row {
        // Firefox/IE collapse white-space
        letter-spacing: -1em;
        // Webkit collapse white-space
        display: table;
        width: 100%;
        // Opera collapse white-space
        @at-root {
            .opera-only :-o-prefocus, & {
                word-spacing: -0.43em;
            }
        }
        // IE < 8 collapse white-space
        @if map-get-deep($grid, settings, old-ie) {
            *letter-spacing: normal;
            *word-spacing: -0.43em;
        }	
        // Required for some third-party sliders
        table-layout: fixed;
        // Reset spacing
        @at-root {
            * {        
                letter-spacing: normal;
                word-spacing: normal;
                text-rendering: auto;
            }		
        }
    }
    
    .#{map-get-deep($grid, options, row-namespace)} {
        
        @extend %row;
        
        // row-helpers
        
    } // component(row)
    
    //-------------------------------------------------------------
    // Single Column
    //-------------------------------------------------------------
    
    %column {
        display: inline-block;
        vertical-align: top;
        // IE < 8: fake inline-block
        @if map-get-deep($grid, settings, old-ie) {
            *display: inline;
            zoom: 1; 
        }
    }
    
    #{$col-selector} {
        
        @extend %column;
        
        @if map-get-deep($grid, settings, mobile-first) {
            width: 100%;
        } @else {	
            @at-root {
                .#{map-get-deep($grid, options, row-namespace)},
                [class*="#{map-get-deep($grid, options, row-namespace)}-"]:not([class*="-no-gutter"]):not([class*="-flow"]) {
                    > #{$col-selector} {
                        @include gutter;
                    }
                }
            }
        }
        
        // Default Column Width
        @if not map-get-deep($grid, settings, mobile-first) {
            @for $i from 1 through map-get-deep($grid, options, columns) {
                @at-root {
                    .#{map-get-deep($grid, options, col-namespace)}-#{$i} {	
                        width: column-width($i, map-get-deep($grid, options, columns));
                    }
                    #{$row-no-gutter} {
                        .#{map-get-deep($grid, options, col-namespace)}-#{$i} {	
                            width: no-gutter-column-width($i, map-get-deep($grid, options, columns));
                        }
                    }
                }
            }	
        }
        
    // Custom Width Overrides
    //-------------------------------------------------------------
    
 
    
    } // $col-selector
	
} // @mixin grid

//-------------------------------------------------------------
// Functions
//-------------------------------------------------------------


// Config
//-------------------------------------------------------------

@function breakpoint($breakpoint) {
    @return map-get(map-get($grid, breakpoints), $breakpoint);
}

@function fraction($fraction) {
    @return map-get(map-get($grid, fractions), $fraction);
}

//-------------------------------------------------------------
// Utilities
//-------------------------------------------------------------


// Magic Column
//-------------------------------------------------------------

@mixin magic-column($config: ()) {
	
	$config: map-merge((
		namespace : map-get-deep($grid, options, col-namespace), 
		stack     : map-get-deep($grid, options, col-collapse), 
		semantic  : true
	), $config);
	
	&:first-child {
		@for $i from 1 through map-get-deep($grid, options, columns) {
			&:nth-last-child(#{$i}) {
				&, ~ [class*="#{map-get($config, namespace)}"] {
					@if map-get-deep($grid, settings, mobile-first) {	
						@if map-get($config, semantic) {
							margin-left: 0;	
							width: 100%;
						}	
						@media (min-width: map-get($config, stack)) {
							width: magic-column-width($i);
							@if map-get($config, semantic) {
								@include gutter;
							}
						}
					} @else {
						width: magic-column-width($i);
						@if map-get($config, semantic) {
							@include gutter;
						}
						@media (max-width: map-get($config, stack)) {
							width: 100%;
							@if map-get($config, semantic) {
								margin-left: 0;
							}
						}
					}
				}
			}
		}
	}
		
} // @mixin magic-column

//=================================================================
// Semantic Grid System Framework
//=================================================================


@include grid;