/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
http://github.com/esr360/Kayzen-GS/
	
-----------------------------------------------------------------*/

//=================================================================
// Configuration
//=================================================================

// Options
//-----------------------------------------------------------------

// Support Internet Explorer 6 & 7?
$old-ie                         : true;

// Enable custom column stacking?
$column-stacking                : true;

// Generate Flow Columns?
$flow-columns                   : true;

// Generate Magic Columns?
$magic-columns                  : true;

// Generate Block Columns?
$block-columns                  : true;

// Set row namespace
$row-namespace                  : row;

// Set column namespace
$col-namespace                  : span;

// Grid System
//-----------------------------------------------------------------

// How many columns should your grid system have?
$columns                        : 12;

// How big should the gutter inbetween your columns be?
$gutter                         : 2.5%; // percentages only

// Breakpoints
//-----------------------------------------------------------------

$breakpoints: (
	break-1                     : 460px,
	break-2                     : 720px,
	break-3                     : 940px,
	break-4                     : 1200px
);

@function breakpoint($breakpoint) {
    @return map-get($breakpoints, $breakpoint);
}

// Set the maximum width for default vertically stacked columns
$col-collapse                   : breakpoint(break-3);

// Fractions
//-----------------------------------------------------------------

$fractions: (
	full                        : (columns: 1, span: 1),
	half                        : (columns: 2, span: 1),
	third                       : (columns: 3, span: 1),
	quarter                     : (columns: 4, span: 1),
	sixth                       : (columns: 6, span: 1)
);

@function fraction($fraction) {
    @return map-get($fractions, $fraction);
}

//=================================================================
// Kayzen GS Framework
//=================================================================

// Column Row
//-----------------------------------------------------------------

%row {
	// Firefox/IE collapse white-space
	letter-spacing: -0.31em;
	// Webkit collapse white-space
	display: table !important;
	width: 100%;
	// Opera collapse white-space
	@at-root {
		.opera-only :-o-prefocus, & {
			word-spacing: -0.43em;
		}
	}
	// IE < 8 collapse white-space
	@if $old-ie {
		*letter-spacing: normal;
		*word-spacing: -0.43em;
	}	
	@at-root {
		// Reset spacing
		* {        
			letter-spacing: normal;
			word-spacing: normal;
			text-rendering: auto;
		}		
	}
}

%flow-row {
	@extend %row;
	margin-left: -$gutter;
	width: 100% + $gutter;
}

// Single Column
//-----------------------------------------------------------------

%column {
	display: inline-block;
	vertical-align: top;
	margin-left: $gutter;
	// IE < 8: fake inline-block
	@if $old-ie {
		*display: inline;
		zoom: 1; 
	}
	&:first-child {
		margin-left: 0;
	}
}

// Column width mixin
@mixin column-width($columns, $span) {
	width: ( (100/$columns) * $span) - ( ( ((100 / ((100/$columns) * $span)) - 1) * $gutter ) / ( $columns / $span ) );
}

// Flow Column width mixin
@mixin flow-column-width($columns, $span) {
	width: ((100/$columns) * $span) - $gutter;
}

// Magic Column width mixin
@mixin magic-column($columns: $columns) {
	&:first-child {
		@for $i from 1 through $columns {
			&:nth-last-child(#{$i}) {
				&, ~ [class*="#{$col-namespace}"] {		
					width: (100/$i) - ( ( ( (100 / (100/$i) ) - 1) * $gutter ) / $i );
				}
			}
		}
	}	
}

//=================================================================
// Kayzen GS Generator
//=================================================================
	
// Column Row
//-----------------------------------------------------------------

.#{$row-namespace} {
	@extend %row;
}

// Individual Column
//-----------------------------------------------------------------

[class*="#{$col-namespace}"] {
	@extend %column;	
}

// Column Width
//-----------------------------------------------------------------

@for $i from 1 through $columns {
	.#{$col-namespace}-#{$i} {			
		@include column-width($columns, $i);
	}
}

// Default Column Stacking
//-----------------------------------------------------------------

@media (max-width: $col-collapse) {
	[class*="#{$col-namespace}"]:not([class*="break"]) {
		width: 100%;
		margin-left: 0;
	}
}

// Custom Column Stacking
//-----------------------------------------------------------------

	@if $column-stacking {
		@each $bp, $width in $breakpoints {
			@media (max-width: $width) {
				&.#{$bp} {
					> [class*="#{$col-namespace}"]:not([class*="break"]) {
						width: 100%;
					}
				}
			}
		} 	
	} 

// Flow Columns
//-----------------------------------------------------------------

@if $flow-columns {
	.flow-columns {
		@extend %flow-row;
		@for $i from 1 through $columns {
			.#{$col-namespace}-#{$i} {		
				@include flow-column-width($columns, $i)
			}
		}
		> [class*="#{$col-namespace}"] {
			@extend %column;
			&:first-child {
				margin-left: $gutter;
			}
			@media (max-width: $col-collapse) {
				width: (100% - $gutter);
				margin-left: $gutter;
			}
		}
	}
}

// Magic Columns
//-----------------------------------------------------------------

@if $magic-columns {
	@media (min-width: $col-collapse) {
		.magic-columns {
			> [class*="#{$col-namespace}"]:not([class*="break"]) {
				@include magic-column;
			}
		}
	}
}

// Block Columns
//-----------------------------------------------------------------

@if $block-columns {
	.block-columns {
		> [class*="#{$col-namespace}"]:not([class*="break"]) {
			display: table-cell;
		}
	}
}

// Column Width Overrides
// For Flow Columns only
//-----------------------------------------------------------------

// Reverse map function
// http://git.io/vLfuz
@function reverse-map ($map) {	
    $keys: map-keys($map);
    $map-reversed: ();    
    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }
    $result: $map-reversed; 
    @return $result;
} // reverse-map

// Reverse $breakpoints map
// This is to allow the generated CSS to override when scaling
$reverse-breakpoints: reverse-map($breakpoints);
	
.#{$row-namespace} {

	@each $bp, $width in $reverse-breakpoints {
		@media (max-width: $width) {
			@each $name, $fraction in $fractions {				
				.#{$bp}-#{$name} {
					@include flow-column-width(map-get($fraction, columns), map-get($fraction, span));
				}
			}
		}
	}

} // .#{$row-namespace}

// Usage
// <div class="span-3 break-1-full break-2-half break-3-third">>

//=================================================================
// Custom Grid System Generator
//=================================================================

// Custom Column
//-----------------------------------------------------------------

@mixin flow-column {
	@extend %column;
	&:first-child {
		margin-left: $gutter;
	}
}

@mixin block-column {
	display: table-cell;
}

// Custom Responsive Handling
//-----------------------------------------------------------------

@mixin respond-to($width, $breakpoint, $flow-columns: false) {
	@media (max-width: breakpoint($breakpoint)) {
		$columns: map-get(fraction($width), columns);
		$span: map-get(fraction($width), span);
		@if $flow-columns {
			@include flow-column-width($columns, $span);
		} @else {
			@include column-width($columns, $span);
			margin-left: 0;
		}
	}
}

// Usage
//	@include respond-to(half, break-2);

//=================================================================
// Semantic Examples
// Based off the default value of 12 for $columns
//=================================================================

.main {
	@extend %row;
}

.sidebar {
	@extend %column;
	@include column-width(12, 4);
	@include respond-to(full, break-3);
}

.content {
	@extend %column;
	@include column-width(12, 8);
	@include respond-to(full, break-3);
}

// Custom flow columns

.portfolio-grid {
	@extend %flow-row;	
}

.portfolio-item {
	@include flow-column;
	@include flow-column-width(12, 3);
	@include respond-to(third, break-3, true);
	@include respond-to(half, break-2, true);
	@include respond-to(full, break-1, true);
}