/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
http://github.com/esr360/Kayzen-GS/
	
-----------------------------------------------------------------*/

//=================================================================
// Configuration
//=================================================================

// Options
//-----------------------------------------------------------------

// Support Internet Explorer 6 & 7? (regular columns only)
$old-ie                         : true;

// Enable Responsiveness?
$responsive                     : true;

// Enable mobile-first mode?
$mobile-first                   : true;

// Enable custom column stacking?
$column-stacking                : true;

// Enable custom width overrides?
$width-override                 : true;

// Generate Flow Columns?
$flow-columns                   : true;

// Generate Magic Columns?
$magic-columns                  : true;

// Generate Block Columns?
$block-columns                  : true;

// Set row namespace
$row-namespace                  : row;

// Set column namespace
$col-namespace                  : span;

// Grid System
//-----------------------------------------------------------------

// How many columns should your grid system have?
$columns                        : 12;

// How big should the gutter inbetween your columns be?
$gutter                         : 2.5%; // percentages only

// Breakpoints
//-----------------------------------------------------------------

$breakpoints: (
	break-1                     : 460px,
	break-2                     : 720px,
	break-3                     : 940px,
	break-4                     : 1200px
);

@function breakpoint($breakpoint) {
    @return map-get($breakpoints, $breakpoint);
}

// Set the maximum width for default vertically stacked columns
$col-collapse                   : breakpoint(break-3);

// Fractions
//-----------------------------------------------------------------

$fractions: (
	full                        : (span: 1, columns: 1),
	half                        : (span: 1, columns: 2),
	third                       : (span: 1, columns: 3),
	quarter                     : (span: 1, columns: 4),
	sixth                       : (span: 1, columns: 6)
);

@function fraction($fraction) {
    @return map-get($fractions, $fraction);
}

//=================================================================
// Kayzen GS Framework
//=================================================================

// Set min/max width for breakpoints
$scale: null;
@if $mobile-first {	
	$scale: min; 
} 
@else {	
	$scale: max; 
}

// Reset $mobile-first to false if $responsive is disabled
@if $responsive == false {
	$mobile-first: false;
}

// Column Row
//-----------------------------------------------------------------

%row {
	// Firefox/IE collapse white-space
	letter-spacing: -0.31em;
	// Webkit collapse white-space
	display: table !important;
	width: 100%;
	// Opera collapse white-space
	@at-root {
		.opera-only :-o-prefocus, & {
			word-spacing: -0.43em;
		}
	}
	// IE < 8 collapse white-space
	@if $old-ie {
		*letter-spacing: normal;
		*word-spacing: -0.43em;
	}	
	// Reset spacing
	@at-root {
		* {        
			letter-spacing: normal;
			word-spacing: normal;
			text-rendering: auto;
		}		
	}
}

%flow-row {
	margin-left: -$gutter;
	width: 100% + $gutter;
}

// Single Column
//-----------------------------------------------------------------

%column {
	display: inline-block;
	vertical-align: top;
	// IE < 8: fake inline-block
	@if $old-ie {
		*display: inline;
		zoom: 1; 
	}
}

@mixin gutter {
	margin-left: $gutter;
	&:first-child {
		margin-left: 0;
	}
}

// Column width mixin
@mixin column-width($span, $columns) {
	width: ( (100/$columns) * $span) - ( ( ((100 / ((100/$columns) * $span)) - 1) * $gutter ) / ( $columns / $span ) );
}

// Flow Column width mixin
@mixin flow-column-width($span, $columns) {
	width: ((100/$columns) * $span) - $gutter;
}

// Magic Column width mixin
@mixin magic-column-width($columns: $columns) {
	width: (100/$columns) - ( ( ( (100 / (100/$columns) ) - 1) * $gutter ) / $columns );
}

// Magic Column
//-----------------------------------------------------------------

@mixin magic-column($namespace: $col-namespace, $stack: $col-collapse, $semantic: true) {
	&:first-child {
		@for $i from 1 through $columns {
			&:nth-last-child(#{$i}) {
				&, ~ [class*="#{$namespace}"] {
					@if $mobile-first {	
						@if $semantic {
							margin-left: 0;	
							width: 100%;
						}	
						@media (min-width: $stack) {
							@include magic-column-width($i);
							@if $semantic {
								@include gutter;
							}
						}
					} @else {
						@include magic-column-width($i);
						@if $semantic {
							@include gutter;
						}
						@media (max-width: $stack) {
							width: 100%;
							@if $semantic {
								margin-left: 0;
							}
						}
					}
				}
			}
		}
	}	
}

//=================================================================
// Kayzen GS Generator
//=================================================================
	
// Individual Column
//-----------------------------------------------------------------

[class*="#{$col-namespace}"] {
	@extend %column;
	@if $mobile-first {
		width: 100%;
	} @else {		
		@include gutter;
	}
}

// Default Column Width
//-----------------------------------------------------------------

@if $mobile-first == false {
	@for $i from 1 through $columns {
		.#{$col-namespace}-#{$i} {	
			@include column-width($i, $columns);
		}
	}	
}
	
// Column Row
//-----------------------------------------------------------------

.#{$row-namespace} {
	
	@extend %row;

// Column Stacking
//-----------------------------------------------------------------

	@mixin stack-columns {
		@if $mobile-first {
			@for $i from 1 through $columns {
				.#{$col-namespace}-#{$i} {	
					@include column-width($i, $columns);
				}
			}
			> [class*="#{$col-namespace}"]:not([class*="break"]) {
				@include gutter;
			}
		} @else {
			> [class*="#{$col-namespace}"]:not([class*="break"]) {
				width: 100%;
				margin-left: 0;
				display: block;
			}
		}		
	}

	// Default Stacking
	@if $responsive {
		@media (#{$scale}-width: $col-collapse) {
			&:not([class*="break"]):not([class*="flow"]) {
				@include stack-columns;
			}
		}
	}

	// Custom Stacking
	@if $responsive {
		@if $column-stacking {
			@each $bp, $width in $breakpoints {
				@media (#{$scale}-width: $width) {
					&.#{$bp} {
						@include stack-columns;
					}
				}
			} 	
		} 
	}

} // row

// Flow Columns
//-----------------------------------------------------------------

@if $flow-columns {
	.flow-row {
		@extend %flow-row;
		@for $i from 1 through $columns {
			.#{$col-namespace}-#{$i} {		
				@if $mobile-first {
					width: (100% - $gutter);
					@media (min-width: $col-collapse) {
						@include flow-column-width($i, $columns);
					}
				} @else {
					@include flow-column-width($i, $columns);
				}
			}
		}
		> [class*="#{$col-namespace}"] {
			margin-left: $gutter;
			&:not([class*="break"]) {
				@if $responsive {
					@if $mobile-first == false {
						@media (max-width: $col-collapse) {
							width: (100% - $gutter);
						}
					}
				}
			}
		}
	}
}

// Magic Columns
//-----------------------------------------------------------------

@if $magic-columns {
	.magic-row {
		> [class*="#{$col-namespace}"]:not([class*="break"]) {	
			@include magic-column($semantic: false);
		}
	}	
}

// Block Columns
//-----------------------------------------------------------------

@if $block-columns {
	.block-row {
		> [class*="#{$col-namespace}"]:not([class*="break"]) {
			display: table-cell;
		}
	}
}

// Column Width Overrides
// For Flow Columns only
//-----------------------------------------------------------------

// Reverse map function
// http://git.io/vLfuz
@function reverse-map ($map) {	
    $keys: map-keys($map);
    $map-reversed: ();    
    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }
    $result: $map-reversed; 
    @return $result;
}

// Reverse $breakpoints map
// This is to allow the generated CSS to override when scaling
@if $responsive {
	@if $width-override {
		$reverse-breakpoints: null;
		@if $mobile-first {
			$reverse-breakpoints: $breakpoints;
		} @else {
			$reverse-breakpoints: reverse-map($breakpoints);	
		}	
		.#{$row-namespace} {
			@each $bp, $width in $reverse-breakpoints {
				@media (#{$scale}-width: $width) {
					@each $name, $fraction in $fractions {				
						.#{$bp}-#{$name} {
							@include flow-column-width(map-get($fraction, span), map-get($fraction, columns));
						}
					}
				}
			}
		}
	}
}

//=================================================================
// Semantic Grid System Framework
//=================================================================

// Custom Column
//-----------------------------------------------------------------

@mixin column (
	$span: 1, 
	$columns: 1, 
	$type: null, 
	$namespace: $col-namespace, 
	$stack: $col-collapse, 
	$mobile-first: $mobile-first,
	$respond-to: null
) {
	@extend %column;
	@if $type == block {
		display: table-cell;		
	} 
	@if $type == magic {
		@include magic-column($namespace, $stack);
	} @else if $type == flow {	
		@include flow-column-width($span, $columns);
		margin-left: $gutter;
	} @else {
		@if $mobile-first {
			width: 100%;
			@media (min-width: $stack) {
				@include column-width($span, $columns);
				@include gutter;
			}
		} @else {		
			@include gutter;
			@include column-width($span, $columns);
			@media (max-width: $stack) {
				margin-left: 0;
				width: 100%;
			}
		}
	}
	@if $respond-to {	
		@each $width, $breakpoint in $respond-to {
			$columns: null;	$span: null; $respond-scale: null;
			@if $mobile-first { 
				$respond-scale: min; 
			} 
			@else {
				$respond-scale: max; 
			}
			@media (#{$respond-scale}-width: breakpoint($breakpoint)) {
				@if type-of($width) == string {
					$columns: map-get(fraction($width), columns);
					$span: map-get(fraction($width), span);
				} @else if type-of($width) == list {
					$span: nth($width, 1);
					$columns: nth($width, 2);			
				}
				@if $flow-columns {
					@include flow-column-width($span, $columns);
				} @else {
					@include column-width($span, $columns);
					@if $mobile-first == false {
						margin-left: 0;
					}
				}
			}	
		}
	}
}

// Custom Row
//-----------------------------------------------------------------

@mixin row($type: null) {
	@extend %row;
	@if $type == flow {		
		@extend %flow-row;
	}
}

//=================================================================
// Semantic Examples
//=================================================================

.main {
	@include row;
}

.sidebar {
	@include column(
		$span: 4, 
		$columns: 12
	);
}

.content {
	@include column(
		$span: 8, 
		$columns: 12
	);
}

// Custom Flow Columns

.portfolio-grid {
	@include row(flow);	
}

.portfolio-item {
	@include column(
		$span: 3, 
		$columns: 12, 
		$type: flow,
		$mobile-first: false,
		$respond-to: (
			(third, break-3),
			(half, break-2),
			(full, break-1)
		)
	);
}

// Custom Flow Columns - Mobile First

.photo-grid {
	@include row(flow);	
}

.photo {
	@include column(
		$type: flow,
		$respond-to: (
			((6, 12), break-1),
			((4, 12), break-2),
			((3, 12), break-3)
		)
	);
}

// Custom Magic Columns

.clients {
	@include row;
}

.client {
	@include column(
		$type: magic, 
		$columns: 6, 
		$namespace: client, 
		$stack: breakpoint(break-2)
	);
} 